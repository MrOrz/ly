{"version":3,"sources":["lib/FBAsync.js","FacebookPage.js","lib/text.js","App.js","serviceWorker.js","index.js"],"names":["fbPromise","window","FB","Promise","resolve","fbAsyncInit","then","init","appId","process","version","React","memo","_ref","_ref$tabs","tabs","_ref$href","href","fbRoot","createRef","useEffect","FBAsync","XFBML","parse","current","react_default","a","createElement","ref","className","data-href","data-tabs","join","data-small-header","data-adapt-container-width","data-show-facepile","data-hide-cta","BREAK","$$BREAK","traverseElems","elems","callback","result","i","length","returnValue","traverseForStrings","push","elem","Array","isValidElement","children","Children","toArray","props","newChildren","every","child","idx","cloneElement","newLineRegExp","RegExp","concat","DATA","area","party","name","prideWatchPage","position","desc","facebookPage","Wrapper","styled","div","_templateObject","Button","button","_templateObject2","Note","textarea","_templateObject3","App","_useState","useState","_useState2","Object","slicedToArray","setIdx","_DATA$idx","placeholder","onClick","e","target","select","src_FacebookPage","str","tokens","tokenized","split","filter","token","map","line","match","key","Boolean","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.430088a9.chunk.js","sourcesContent":["const fbPromise = (window.FB\n  ? Promise.resolve(window.FB)\n  : new Promise(resolve => {\n      window.fbAsyncInit = () => {\n        resolve(window.FB);\n      };\n    })\n).then(FB => {\n  FB.init({\n    appId: process.env.REACT_APP_FB_ID,\n    version: 'v3.2',\n  });\n  return FB;\n});\n\nexport default fbPromise;\n","import React, { useEffect } from 'react';\n\nimport FBAsync from './lib/FBAsync';\n\nfunction FacebookPage({ tabs = ['messages', 'timeline'], href = '' }) {\n  const fbRoot = React.createRef();\n\n  useEffect(() => {\n    FBAsync.then(FB => {\n      FB.XFBML.parse(fbRoot.current);\n    });\n  });\n\n  return (\n    <div ref={fbRoot}>\n      <div\n        className=\"fb-page\"\n        data-href={href}\n        data-tabs={tabs.join(',')}\n        data-small-header=\"true\"\n        data-adapt-container-width=\"true\"\n        data-show-facepile=\"false\"\n        data-hide-cta=\"true\"\n      />\n    </div>\n  );\n}\n\nexport default React.memo(FacebookPage);\n","import React from 'react';\n\nconst BREAK = { $$BREAK: true };\n\n/**\n * Invokes traverseForStrings for each item in elems.\n * When `BREAK` is received, break traversal immediately.\n *\n * @param {*} elem Array of elements to traverse\n * @param {Function} callback passed to traverseForStrings()\n */\nfunction traverseElems(elems, callback) {\n  const result = [];\n  for (let i = 0; i < elems.length; i += 1) {\n    const returnValue = traverseForStrings(elems[i], callback);\n    if (returnValue === BREAK) break;\n    result.push(returnValue);\n  }\n\n  return result;\n}\n\n/**\n * Traverses elem tree for strings, returns callback(string)\n * @param {*} elem\n * @param {Function} callback\n */\nfunction traverseForStrings(elem, callback) {\n  switch (true) {\n    case typeof elem === 'string':\n      return callback(elem);\n\n    case elem instanceof Array:\n      return traverseElems(elem, callback);\n\n    case React.isValidElement(elem): {\n      const children = React.Children.toArray(elem.props.children);\n      const newChildren = traverseElems(children, callback);\n\n      // No need to clone element if new children is identical with the original\n      //\n      if (\n        children.length === newChildren.length &&\n        children.every((child, idx) => child === newChildren[idx])\n      ) {\n        return elem;\n      }\n\n      return React.cloneElement(elem, {}, newChildren);\n    }\n    default:\n      return null;\n  }\n}\n\nfunction flatternPureStrings(tokens) {\n  return tokens.every(token => typeof token === 'string')\n    ? tokens.join()\n    : tokens;\n}\n\nconst newLinePattern = '(\\r\\n|\\r|\\n)';\n// Spaces around new line pattern should be safe to trim, because we are placing <br>\n// on the newLinePattern.\nconst newLineRegExp = RegExp(` *${newLinePattern} *`, 'g');\n\n/**\n * Place <br> for each line break.\n * Automatically trims away leading & trailing line breaks.\n *\n * @param {*} elem React element, string, array of string & react elements\n */\nexport function nl2br(elem) {\n  return traverseForStrings(elem, str => {\n    if (!str) return str;\n\n    const tokenized = str\n      .split(newLineRegExp)\n      .filter(token => token !== '') // Filter out empty strings\n      .map((line, idx) =>\n        line.match(newLineRegExp) ? <br key={`br${idx}`} /> : line\n      );\n\n    // If the tokenized contains only string, join into one single string.\n    //\n    return flatternPureStrings(tokenized);\n  });\n}\n","import React, { useState } from 'react';\nimport styled from '@emotion/styled';\n\nimport FacebookPage from './FacebookPage';\nimport { nl2br } from './lib/text';\n\nconst DATA = [\n  {\n    area: '不分區',\n    party: '國民黨',\n    name: '王金平',\n    prideWatchPage: 'https://www.pridewatch.tw/beta/people/wangjp',\n    position: '支持同婚',\n    desc:\n      '2016同性婚姻草案<許毓仁版>連署人(2016/10/24)\\n『目前政府極力推動落實兩公約，他認為應將同志人權視為兩公約的延伸，也理解與會者的主張，但他身為立法院長，應維持中立，不能有立場。』（2014年2月）\\n接受同志團體陳情，「同志婚姻的確是人權問題」（2014年2月）\\n「多元成家的議題還沒有到社會接受的階段」（2013年）',\n    facebookPage: 'https://www.facebook.com/jingping.tw/',\n  },\n  {\n    area: '不分區',\n    party: '民進黨',\n    name: '尤美女',\n    prideWatchPage: 'https://www.pridewatch.tw/beta/people/yumn',\n    position: '支持同婚',\n    desc: '挺同婚（2013年）',\n    facebookPage: 'https://www.facebook.com/yumeinu/',\n  },\n  {\n    area: '新竹市',\n    party: '民進黨',\n    name: '柯建銘',\n    prideWatchPage: 'https://www.pridewatch.tw/beta/people/kejm',\n    position: '反對同婚',\n    desc:\n      '「黨內傾向立專法」(2016/11/29)\\n任職第8屆司法及法制委員會時並無表態或出席（2014年）\\n曾簽署下一代幸福的問卷調查，反對同婚（2013年）',\n    facebookPage: 'https://www.facebook.com/kerchenming/',\n  },\n];\n\nconst Wrapper = styled.div`\n  display: flex;\n  padding: 40px;\n\n  section {\n    flex: 1;\n    padding-left: 24px;\n    &:first-child {\n      padding-left: 0;\n    }\n  }\n`;\n\nconst Button = styled.button`\n  font-size: 32px;\n`;\n\nconst Note = styled.textarea`\n  width: 100%;\n  height: 100%;\n`;\n\nfunction App() {\n  const [idx, setIdx] = useState(0);\n\n  const { name, prideWatchPage, position, desc, facebookPage } = DATA[idx];\n\n  return (\n    <Wrapper>\n      <section>\n        <Note\n          placeholder=\"把陳情文字貼在這裡，方便複製貼上\"\n          onClick={e => e.target.select()}\n        />\n      </section>\n      <section>\n        <FacebookPage href={facebookPage} />\n      </section>\n      <section>\n        <h1>\n          <a href={prideWatchPage}>{name}</a>\n        </h1>\n        <h2>{position}</h2>\n        <p>{nl2br(desc)}</p>\n        <Button onClick={() => setIdx((idx + 1) % DATA.length)}>\n          下一位 》\n        </Button>\n      </section>\n    </Wrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}